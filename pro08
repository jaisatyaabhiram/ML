AIM: To apply Random Forest Algorithm for Regression.
DESCRIPTION:Random Forest for regression works by building multiple
decision trees to predict continuous values. Each tree in the forest makes
its own prediction based on a random subset of the data, and the final
prediction is the average of all the trees' predictions. This method helps
improve accuracy and reduces overfitting compared to using a single decision
tree. Random Forest is effective for regression tasks because it can capture
complex relationships in the data and is less sensitive to noise or
outliers. It’s a reliable algorithm for predicting numerical values in
real-world problems.
PROGRAM:
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
# Load dataset
df = pd.read_csv('student_scores.csv')
# Display first few rows
print(df.head())
X = df.drop(columns=['final_score']) # Features
y = df['final_score'] # Target variable
# Split dataset into training (80%) and testing (20%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
random_state=42)
# Create and train the model
rf_regressor = RandomForestRegressor(n_estimators=100, max_depth=5,
random_state=42)
rf_regressor.fit(X_train, y_train)
y_pred = rf_regressor.predict(X_test)
# Compute error metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)
# Print evaluation results
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"R² Score: {r2:.2f}")
# Plot feature importance
importances = rf_regressor.feature_importances_
feature_names = X.columns
plt.figure(figsize=(8, 6))
plt.barh(feature_names, importances, color='skyblue')
plt.xlabel("Feature Importance")
plt.ylabel("Features")
plt.title("Feature Importance in Student Score Prediction")
plt.show()
