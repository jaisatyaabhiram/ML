AIM: To Demonstrate Simple Linear Regression Algorithm for a Regression
Problem.
DESCRIPTION:Simple Linear Regression is a technique used to predict a
continuous target variable based on one feature. It fits a straight line
to the data that best represents the relationship between the input and
output. This method is widely used for tasks like predicting prices or
trends where there's a clear linear relationship between variables.
PROGRAM:
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_regression
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
# Generate synthetic regression data
X, y = make_regression(n_samples=100, n_features=1, noise=15, random_state=42)
# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
random_state=42)
# Create and train the Linear Regression model
lin_reg = LinearRegression()
lin_reg.fit(X_train, y_train)
# Predict on the test set
y_pred = lin_reg.predict(X_test)
# Evaluate performance
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse:.2f}')
print(f'RÂ² Score: {r2:.2f}')
print(f'Intercept: {lin_reg.intercept_:.2f}, Slope: {lin_reg.coef_[0]:.2f}')
# Plot the regression line
plt.scatter(X_test, y_test, color='blue', label='Actual Data')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Regression Line')
plt.xlabel('Feature')
plt.ylabel('Target')
plt.title('Simple Linear Regression')
plt.legend()
plt.show()
